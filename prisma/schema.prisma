// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  name    String?
  address Address?
  posts   Post[]
}

type Address {
  street String
  city   String
  state  String
  zip    String
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  slug     String    @unique
  title    String
  body     String
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
  comments Comment[]
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  password     String
  firstName    String?
  lastName     String?
  role         String?
  // add any other fields you need
  RefreshToken RefreshToken?
}

model Branch {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  address    String
  warehouses Warehouse[]
}

model Warehouse {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  branch   Branch? @relation(fields: [branchId], references: [id])
  branchId String  @db.ObjectId
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account? @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model Supplier {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  address String
  email   String
  phone   String
}

model Customer {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String        @unique
  phone        String
  address      Address?
  orders       Order[]
  appointments Appointment[]
  checkins     Checkin[]
}

model Order {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  orderDate    DateTime      @default(now())
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String        @db.ObjectId
  totalAmount  Int
  status       String
  orderDetails OrderDetail[]
}

model OrderDetail {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     String  @db.ObjectId
  quantity    Int
  unitPrice   Float
  totalAmount Float
  Item        Item?   @relation(fields: [itemId], references: [id])
  itemId      String? @db.ObjectId
}

// Generate customer appointment
model Appointment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @db.ObjectId
  date        DateTime
  description String?
}

// Generate customer checkin
model Checkin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @db.ObjectId
  checkinDate DateTime @default(now())
  temperature Float
  symptoms    String?
}

// Generate commission model
model Commission {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  item             Item            @relation(fields: [itemId], references: [id])
  itemId           String          @db.ObjectId
  userGroupId      String
  startDate        DateTime
  endDate          DateTime
  CommissionType   CommissionType? @relation(fields: [commissionTypeId], references: [id])
  commissionTypeId String?         @db.ObjectId
}

// Generate item and item type model
model ItemType {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  items       Item[]
}

model Item {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  itemType    ItemType      @relation(fields: [itemTypeId], references: [id])
  itemTypeId  String        @db.ObjectId
  OrderDetail OrderDetail[]
  Commission  Commission[]
  Lot         Lot[]
  Inventory   Inventory[]
}

// Generate commission type with some props like type, value
model CommissionType {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  value       Float
  commissions Commission[]
}

model Lot {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  item        Item        @relation(fields: [itemId], references: [id])
  itemId      String      @db.ObjectId
  quantity    Int
  price       Float
  importDate  DateTime
  expiryDate  DateTime
  Inventory   Inventory[]
}

model Inventory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String   @db.ObjectId
  expiryDate DateTime
  lot        Lot      @relation(fields: [lotId], references: [id])
  lotId      String   @db.ObjectId
  quantity   Int
}
