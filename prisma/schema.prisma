// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  name    String?
  address Address?
  posts   Post[]
}

type Address {
  street String
  city   String
  state  String
  zip    String
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  slug     String    @unique
  title    String
  body     String
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
  comments Comment[]
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  password     String
  firstName    String?
  lastName     String?
  role         String?
  // add any other fields you need
  RefreshToken RefreshToken?
}

model Branch {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  address    String
  warehouses Warehouse[]
}

model Warehouse {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  branch   Branch?   @relation(fields: [branchId], references: [id])
  branchId String    @db.ObjectId
  products Product[]
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  quantity    Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String    @db.ObjectId
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account? @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}
